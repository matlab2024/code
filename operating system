// FIBONACCI NUMBERS 25


#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
main ()
{
  pid_t pid;
  int pfd[2];
  int i, j, flg, f1, f2, f3;
  static unsigned int ar[25], br[25];
  if (pipe (pfd) == -1) {
      printf ("Error in pipe");
      exit (-1);
    }
  pid = fork ();
  if (pid == 0) {
      printf ("Child process generates Fibonacci series\n");
      f1 = -1;
      f2 = 1;
      for (i = 0; i < 25; i++)
	{
	  f3 = f1 + f2;
	  printf ("%d\t", f3);
	  f1 = f2;
	  f2 = f3;
	  ar[i] = f3;
	}
      write (pfd[1], ar, 25 * sizeof (int));
    }
  else if (pid > 0)
    {
      wait (NULL);
      read (pfd[0], br, 25 * sizeof (int));
      printf ("\nParent prints Fibonacci that are Prime\n");
      for (i = 0; i < 25; i++)
	{
	  flg = 0;
	  if (br[i] <= 1)
	    flg = 1;
	  for (j = 2; j <= br[i] / 2; j++)
	    {
	      if (br[i] % j == 0)
		{
		  flg = 1;
		  break;
		}
	    }
	  if (flg == 0)
	    printf ("%d\t", br[i]);
	}
      printf ("\n");
    }
  else
    {
      printf ("Process creation failed");
      exit (-1);
    }
}











// NO OF USERS LOGGED IN USING PIPE





#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
int main ()
{
  int pfds[2];
  pipe (pfds);
  if (!fork ())
    {
      close (1);
      dup (pfds[1]);
      close (pfds[0]);
      execlp ("who", "who", NULL);
    }
  else
    {
      close (0);
      dup (pfds[0]);
      close (pfds[1]);
      execlp ("wc", "wc", "-l", NULL);
    }
}



// To exchange message between server and client using message queue.

//Server
/* Server chat process - srvmsg.c */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/types.h>
#include <sys/ipc.h>
#include <sys/msg.h>
  struct mesgq
{
  long type;
  char text[200];
} mq;
main ()
{
  int msqid, len;
  key_t key = 2013;
  if ((msqid = msgget (key, 0644 | IPC_CREAT)) == -1)
    {
      perror ("msgget");
      exit (1);
    }
  printf ("Enter text, ^D to
quit:\n");
  mq.type = 1;
  while (fgets (mq.text, sizeof (mq.text), stdin) != NULL)
    {
      len = strlen (mq.text);
      if (mq.text[len - 1] == '\n')
	mq.text[len - 1] = '\0';
      msgsnd (msqid, &mq, len + 1, 0);
      msgrcv (msqid, &mq, sizeof (mq.text), 0, 0);
      printf ("From Client: \"%s\"\n", mq.text);
    }
  msgctl (msqid, IPC_RMID, NULL);
}


//Client
/* Client chat process - climsg.c */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/types.h>
#include <sys/ipc.h>
#include <sys/msg.h>
  struct mesgq
{
  long type;
  char text[200];
} mq;
main ()
{
  int msqid, len;
  key_t key = 2013;
  if ((msqid = msgget (key, 0644)) == -1)
    {
      printf ("Server not
active\n");
      exit (1);
    }
  printf ("Client ready :\n");
  while (msgrcv (msqid, &mq, sizeof (mq.text), 0, 0) != -1)
    {
      printf ("From Server: \"%s\"\n", mq.text);
      fgets (mq.text, sizeof (mq.text), stdin);
      len = strlen (mq.text);
      if (mq.text[len - 1] == '\n')
	mq.text[len - 1] = '\0';
      msgsnd (msqid, &mq, len + 1, 0);
    }
  printf ("Server Disconnected\n");
}


// To demonstrate communication between process using shared memory.


//Server
/* Shared memory server - shms.c */
#include <stdio.h>
#include <stdlib.h>
#include <sys/un.h>
#include <sys/types.h>
#include <sys/ipc.h>
#include <sys/shm.h>
#define shmsize 27
main ()
{
  char c;
  int shmid;
  key_t key = 2013;
  char *shm, *s;
  if ((shmid = shmget (key, shmsize, IPC_CREAT | 0666)) < 0)
    {
      perror ("shmget");
      exit (1);
    }
  printf ("Shared memory id : %d\n", shmid);
  if ((shm = shmat (shmid, NULL, 0)) == (char *) -1)
    {
      perror ("shmat");
      exit (1);
    }
  memset (shm, 0, shmsize);
  s = shm;
  printf ("Writing (a-z) onto shared
memory\n");
  for (c = 'a'; c <= 'z'; c++)
    *s++ = c;
  *s = '\0';
  while (*shm != '*');
  printf ("Client finished reading\n");
  if (shmdt (shm) != 0)
    fprintf (stderr, "Could not close memory segment.\n");
  shmctl (shmid, IPC_RMID, 0);
}





//Client
/* Shared memory client - shmc.c */
#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
#include <sys/ipc.h>
#include <sys/shm.h>
#define shmsize 27
main ()
{
  int shmid;
  key_t key = 2013;
  char *shm, *s;
  if ((shmid = shmget (key, shmsize, 0666)) < 0)
    {
      printf ("Server not
started\n");
      exit (1);
    }
  else
    printf ("Accessing shared memory id : %d\n", shmid);
  if ((shm = shmat (shmid, NULL, 0)) == (char *) -1)
    {
      perror ("shmat");
      exit (1);
    }
  printf ("Shared memory contents:\n");
  for (s = shm; *s != '\0'; s++)
    putchar (*s);
  putchar ('\n');
  *shm = '*';
}




// To create a new child process using fork system call.

/* Process creation - fork.c */
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
main ()
{
  pid_t pid;
  int x = 5;
  pid = fork ();
  x++;
  if (pid < 0)
    {
      printf ("Process creation
error");
      exit (-1);
    }
  else if (pid == 0)
    {
      printf ("Child process:");
      printf ("\nProcess id is %d", getpid ());
      printf ("\nValue of x is %d", x);
      printf ("\nProcess id of parent is %d\n", getppid ());
    }
  else
    {
      printf ("\nParent process:");
      printf ("\nProcess id is %d", getpid ());
      printf ("\nValue of x is %d", x);
      printf ("\nProcess id of shell is %d\n", getppid ());
    }
}



// To block a parent process until child completes using wait system call.


/* Wait for child termination - wait.c */
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>
main()
{
int i, status;
pid_t pid;
pid = fork();
if (pid < 0)
{
printf("\nProcess creation
failure\n"); exit(-1);
}
else if(pid > 0)
{
wait(NULL);
printf ("\nParent starts\nEven Nos:
"); for (i=2;i<=10;i+=2)
printf ("%3d",i); printf
("\nParent ends\n");
}
else if (pid == 0)
{
printf ("Child starts\nOdd Nos:
"); for (i=1;i<10;i+=2)
printf ("%3d",i);
printf ("\nChild ends\n");
}
}


//To load an executable program in a child processes exec system call.


/* Load a program in child process - exec.c */
#include <stdio.h>
#include <sys/types.h>
#include <unistd.h>
#include <stdlib.h>
main (int argc, char *argv[])
{
  pid_t pid;
  int i;
  if (argc != 3)
    {
      printf ("\nInsufficient arguments to load program");
      printf ("\nUsage: ./a.out <path> <cmd>\n");
      exit (-1);
    }
  switch (pid = fork ())
    {
    case -1:
      printf ("Fork
failed");
      exit (-1);
    case 0:
      printf ("Child process\n");
      i = execl (argv[1], argv[2], 0);
      if (i < 0)
	{
	  printf ("%s program not loaded using exec
system call\n", argv[2]);
	  exit (-1);
	}
    default:
      wait (NULL);
      printf ("Child
Terminated\n");
      exit (0);
    }




//To display directory contents using readdir system call.

/* Directory content listing - dirlist.c */
#include <stdio.h>
#include <dirent.h>
#include <stdlib.h>
main (int argc, char *argv[])
{
  struct dirent *dptr;
  DIR *dname;
  if (argc != 2)
    {
      printf ("Usage: ./a.out
<dirname>\n");
      exit (-1);
    }
  if ((dname = opendir (argv[1])) == NULL)
    {
      perror (argv[1]);
      exit (-1);
    }
  while (dptr = readdir (dname))
    printf ("%s\n", dptr->d_name);
  closedir (dname);
}



//To display file status using stat system call.

/* File status - stat.c
*/
#include <stdio.h>
#include <sys/stat.h>
#include <stdlib.h>
#include <time.h>
int
main (int argc, char *argv[])
{
  struct stat file;
  int n;
  if (argc != 2)
    {
      printf ("Usage: ./a.out
<filename>\n");
      exit (-1);
    }
  if ((n = stat (argv[1], &file)) == -1)
    {
      perror (argv[1]);
      exit (-1);
    }
  printf ("User id : %d\n", file.st_uid);
  printf ("Group id : %d\n", file.st_gid);
  printf ("Block size : %d\n", file.st_blksize);
  printf ("Blocks allocated : %d\n", file.st_blocks);
  printf ("Inode no. : %d\n", file.st_ino);
  printf ("Last accessed : %s", ctime (&(file.st_atime)));
  printf ("Last modified : %s", ctime (&(file.st_mtime)));
  printf ("File size : %d bytes\n", file.st_size);
  printf ("No. of links : %d\n", file.st_nlink);
  printf ("Permissions : ");
  printf ((S_ISDIR (file.st_mode)) ? "d" : "-");
  printf ((file.st_mode & S_IRUSR) ? "r" : "-");
  printf ((file.st_mode & S_IWUSR) ? "w" : "-");
  printf ((file.st_mode & S_IXUSR) ? "x" : "-");
  printf ((file.st_mode & S_IRGRP) ? "r" : "-");
  printf ((file.st_mode & S_IWGRP) ? "w" : "-");
  printf ((file.st_mode & S_IXGRP) ? "x" : "-");
  printf ((file.st_mode & S_IROTH) ? "r" : "-");
  printf ((file.st_mode & S_IWOTH) ? "w" : "-");
  printf ((file.st_mode & S_IXOTH) ? "x" : "-");
  printf ("\n");
  if (file.st_mode & S_ IFREG)
    printf ("File type : Regular\n");
  if (file.st_mode & S_ IFDIR)
    printf ("File type : Directory\n");
}




//FCFS SCHEDULING

#include<iostream>
using namespace std;
 
void findWaitingTime(int processes[], int n, int bt[],
                                   int wt[], int at[])
{
    int service_time[n];
    service_time[0] = at[0];
    wt[0] = 0;
 
    for (int i = 1; i < n ; i++)
    {
        service_time[i] = service_time[i-1] + bt[i-1];
 
        wt[i] = service_time[i] - at[i];
 
        if (wt[i] < 0)
            wt[i] = 0;
    }
}
 
// Function to calculate turn around time
void findTurnAroundTime(int processes[], int n, int bt[],
                                      int wt[], int tat[])
{
    // Calculating turnaround time by adding bt[i] + wt[i]
    for (int i = 0; i < n ; i++)
        tat[i] = bt[i] + wt[i];
}
 
void findavgTime(int processes[], int n, int bt[], int at[])
{
    int wt[n], tat[n];
 
    // Function to find waiting time of all processes
    findWaitingTime(processes, n, bt, wt, at);
 
    // Function to find turn around time for all processes
    findTurnAroundTime(processes, n, bt, wt, tat);
 
    // Display processes along with all details
    cout << "Processes " << " Burst Time " << " Arrival Time "
         << " Waiting Time " << " Turn-Around Time "
         << " Completion Time \n";
    int total_wt = 0, total_tat = 0;
    for (int i = 0 ; i < n ; i++)
    {
        total_wt = total_wt + wt[i];
        total_tat = total_tat + tat[i];
        int compl_time = tat[i] + at[i];
        cout << " " << i+1 << "\t\t" << bt[i] << "\t\t"
             << at[i] << "\t\t" << wt[i] << "\t\t "
             << tat[i]  <<  "\t\t " << compl_time << endl;
    }
 
    cout << "Average waiting time = "
         << (float)total_wt / (float)n;
    cout << "\nAverage turn around time = "
         << (float)total_tat / (float)n;
}
 
// Driver code
int main()
{
    int processes[] = {1, 2, 3};
    int n = sizeof processes / sizeof processes[0];
    
    int burst_time[] = {5, 9, 6};
 
    int arrival_time[] = {0, 3, 6};
 
    findavgTime(processes, n, burst_time, arrival_time);
 
    return 0;
}


// SJF PREEMPTIVE


#include <stdio.h>

int main()
{
int arrival_time[10], burst_time[10], temp[10];
int i, smallest, count = 0, time, limit;
double wait_time = 0, turnaround_time = 0, end;
float average_waiting_time, average_turnaround_time;
printf("nEnter the Total Number of Processes:t");
scanf("%d", &limit);
printf("nEnter Details of %d Processesn", limit);
for(i = 0; i < limit; i++)
{
printf("nEnter Arrival Time:t");
scanf("%d", &arrival_time[i]);
printf("Enter Burst Time:t");
scanf("%d", &burst_time[i]);
temp[i] = burst_time[i];
}
burst_time[9] = 9999;
for(time = 0; count != limit; time++)
{
smallest = 9;
for(i = 0; i < limit; i++)
{
if(arrival_time[i] <= time && burst_time[i] < burst_time[smallest] && burst_time[i] > 0)
{
smallest = i;
}
}
burst_time[smallest]--;
if(burst_time[smallest] == 0)
{
count++;
end = time + 1;
wait_time = wait_time + end - arrival_time[smallest] - temp[smallest];
turnaround_time = turnaround_time + end - arrival_time[smallest];
}
}
average_waiting_time = wait_time / limit;
average_turnaround_time = turnaround_time / limit;
printf("nnAverage Waiting Time:t%lfn", average_waiting_time);
printf("Average Turnaround Time:t%lfn", average_turnaround_time);
return 0;
}



//SJF NON PREEMPTIVE

#include<stdio.h>
 int main()
{
    int bt[20],p[20],wt[20],tat[20],i,j,n,total=0,pos,temp;
    float avg_wt,avg_tat;
    printf("Enter number of process:");
    scanf("%d",&n);
  
    printf("nEnter Burst Time:n");
    for(i=0;i<n;i++)
    {
        printf("p%d:",i+1);
        scanf("%d",&bt[i]);
        p[i]=i+1;         
    }
  
   //sorting of burst times
    for(i=0;i<n;i++)
    {
        pos=i;
        for(j=i+1;j<n;j++)
        {
            if(bt[j]<bt[pos])
                pos=j;
        }
  
        temp=bt[i];
        bt[i]=bt[pos];
        bt[pos]=temp;
  
        temp=p[i];
        p[i]=p[pos];
        p[pos]=temp;
    }
   
    wt[0]=0;            
  
   
    for(i=1;i<n;i++)
    {
        wt[i]=0;
        for(j=0;j<i;j++)
            wt[i]+=bt[j];
  
        total+=wt[i];
    }
  
    avg_wt=(float)total/n;      
    total=0;
  
    printf("nProcesst    Burst Time    tWaiting TimetTurnaround Time");
    for(i=0;i<n;i++)
    {
        tat[i]=bt[i]+wt[i];   
        total+=tat[i];
        printf("np%dtt  %dtt    %dttt%d",p[i],bt[i],wt[i],tat[i]);
    }
  
    avg_tat=(float)total/n;    
    printf("nnAverage Waiting Time=%f",avg_wt);
    printf("nAverage Turnaround Time=%fn",avg_tat);
}


// Non Pre-emptive priority scheduling


#include <bits/stdc++.h>
 

using namespace std;
 
#define totalprocess 5
 
// Making a struct to hold the given input 
 

struct process
{

int at,bt,pr,pno;
};
 
process proc[50];
 
/*
Writing comparator function to sort according to priority if 
arrival time is same 
*/
 

bool comp(process a,process b)
{

if(a.at == b.at)
{

return a.pr<b.pr;
}
else
{

    return a.at<b.at;
}
}
 
// Using FCFS Algorithm to find Waiting time

void get_wt_time(int wt[])
{
// declaring service array that stores cumulative burst time 

int service[50];
 
// Initialising initial elements of the arrays
service[0] = proc[0].at;
wt[0]=0;
 
 

for(int i=1;i<totalprocess;i++)
{
service[i]=proc[i-1].bt+service[i-1];
 
wt[i]=service[i]-proc[i].at;
 
// If waiting time is negative, change it into zero

     

    if(wt[i]<0)

    {

    wt[i]=0;

    }
}
 
}
 

void get_tat_time(int tat[],int wt[])
{
// Filling turnaroundtime array
 

for(int i=0;i<totalprocess;i++)
{

    tat[i]=proc[i].bt+wt[i];
}

     
}
 

void findgc()
{
//Declare waiting time and turnaround time array

int wt[50],tat[50];
 

double wavg=0,tavg=0;
 
// Function call to find waiting time array
get_wt_time(wt);
//Function call to find turnaround time
get_tat_time(tat,wt);

     

int stime[50],ctime[50];
 
stime[0] = proc[0].at;

ctime[0]=stime[0]+tat[0];
 
// calculating starting and ending time

for(int i=1;i<totalprocess;i++)

    {

        stime[i]=ctime[i-1];

        ctime[i]=stime[i]+tat[i]-wt[i];

    }

     

cout<<"Process_no\tStart_time\tComplete_time\tTurn_Around_Time\tWaiting_Time"<<endl;

     

    // display the process details

     

for(int i=0;i<totalprocess;i++)

    {

        wavg += wt[i];

        tavg += tat[i];

         

        cout<<proc[i].pno<<"\t\t"<<

            stime[i]<<"\t\t"<<ctime[i]<<"\t\t"<<

            tat[i]<<"\t\t\t"<<wt[i]<<endl;

    }

     

        // display the average waiting time

        //and average turn around time

     

    cout<<"Average waiting time is : ";

    cout<<wavg/(float)totalprocess<<endl;

    cout<<"average turnaround time : ";

    cout<<tavg/(float)totalprocess<<endl;
 
}
 

int main()
{

int arrivaltime[] = { 1, 2, 3, 4, 5 };

int bursttime[] = { 3, 5, 1, 7, 4 };

int priority[] = { 3, 4, 1, 7, 8 };

     

for(int i=0;i<totalprocess;i++)
{

    proc[i].at=arrivaltime[i];

    proc[i].bt=bursttime[i];

    proc[i].pr=priority[i];

    proc[i].pno=i+1;

    } 

     

    //Using inbuilt sort function

     

    sort(proc,proc+totalprocess,comp);

     

    //Calling function findgc for finding Gantt Chart

     

    findgc(); 
 

    return 0;
}



// Preemptive Priority Scheduling


// C++ Implementation of Preemptive Priority Scheduling
#include <iostream>
using namespace std;
int main()
{
    int n = 5; //number of processes to be scheduled
    int arrivalTime[n] = {0, 0, 6, 11, 12};
    int burstTime[n] = {4, 3, 7, 4, 2};
    int priority[n + 1] = {1, 2, 1, 3, 2};
    int x[n];


    int waitingTime[n], turnaroundTime[n], completionTime[n];
    int i, j, smallest, count = 0, time; // count -> number of processes completed
    double avg = 0, tt = 0, end;


    for (i = 0; i < n; i++)
        x[i] = burstTime[i];


    priority[n] = 10000;


    for (time = 0; count != n; time++)
    {
        smallest = n;
        for (i = 0; i < n; i++)
        {
            if (arrivalTime[i] <= time && priority[i] < priority[smallest] && burstTime[i] > 0)
                smallest = i;
        }
        burstTime[smallest]--;
        if (burstTime[smallest] == 0)
        {
            count++;
            end = time + 1;
            completionTime[smallest] = end;
            waitingTime[smallest] = end - arrivalTime[smallest] - x[smallest];
            turnaroundTime[smallest] = end - arrivalTime[smallest];
        }
    }
    cout << "Process"
        << "\t  "
        << "burst-time"
        << "\t "
        << "arrival-time"
        << "\t "
        << "waiting-time"
        << "\t"
        << "turnaround-time"
        << "\t "
        << "completion-time"
        << "\t"
        << "Priority" << endl;
    for (i = 0; i < n; i++)
    {
        cout << "p" << i + 1 << "\t\t" << x[i] << "\t\t" << arrivalTime[i] << "\t\t" << waitingTime[i] << "\t\t" << turnaroundTime[i] << "\t\t" << completionTime[i] << "\t\t" << priority[i] << endl;
        avg = avg + waitingTime[i];
        tt = tt + turnaroundTime[i];
    }
    cout << "\n\nAverage waiting time time = " << avg / n;
    cout << "  Average turnaround time time = " << tt / n << endl;
}


// Round robin scheduling algorithm

#include <iostream>
 

using namespace std;
 

void queueUpdation(int queue[],int timer,int arrival[],int n, int maxProccessIndex){

    int zeroIndex;

    for(int i = 0; i < n; i++){

        if(queue[i] == 0){

            zeroIndex = i;

            break;

        }

    }   

    queue[zeroIndex] = maxProccessIndex + 1;
}
 

void queueMaintainence(int queue[], int n){

    for(int i = 0; (i < n-1) && (queue[i+1] != 0) ; i++){

        int temp = queue[i];

        queue[i] = queue[i+1];

        queue[i+1] = temp; 

    }
}
 

void checkNewArrival(int timer, int arrival[], int n, int maxProccessIndex,int queue[]){

    if(timer <= arrival[n-1]){

       bool newArrival = false;

       for(int j = (maxProccessIndex+1); j < n; j++){

             if(arrival[j] <= timer){

              if(maxProccessIndex < j){

                 maxProccessIndex = j;

                 newArrival = true;

              }

           }

       }

       //adds the incoming process to the ready queue

       //(if any arrives)

       if(newArrival)

          queueUpdation(queue,timer,arrival,n, maxProccessIndex);

    }
}
 
//Driver Code

int main(){

    int n,tq, timer = 0, maxProccessIndex = 0;

    float avgWait = 0, avgTT = 0;

    cout << "\nEnter the time quanta : ";

    cin>>tq;

    cout << "\nEnter the number of processes : ";

    cin>>n;

    int arrival[n], burst[n], wait[n], turn[n], queue[n], temp_burst[n];

    bool complete[n];
 

    cout << "\nEnter the arrival time of the processes : ";

    for(int i = 0; i < n; i++)

        cin>>arrival[i];
 

    cout << "\nEnter the burst time of the processes : ";

    for(int i = 0; i < n; i++){

        cin>>burst[i];

        temp_burst[i] = burst[i];

    }
 

    for(int i = 0; i < n; i++){    //Initializing the queue and complete array

        complete[i] = false;

        queue[i] = 0;

    }

    while(timer < arrival[0])    //Incrementing Timer until the first process arrives

        timer++; 

    queue[0] = 1;

     

    while(true){

        bool flag = true;

        for(int i = 0; i < n; i++){

            if(temp_burst[i] != 0){

                flag = false;

                break;

            }

        }

        if(flag)

            break;
 

        for(int i = 0; (i < n) && (queue[i] != 0); i++){

            int ctr = 0;

            while((ctr < tq) && (temp_burst[queue[0]-1] > 0)){

                temp_burst[queue[0]-1] -= 1;

                timer += 1;

                ctr++;
 

                //Checking and Updating the ready queue until all the processes arrive

                checkNewArrival(timer, arrival, n, maxProccessIndex, queue);

            }

            //If a process is completed then store its exit time

            //and mark it as completed

            if((temp_burst[queue[0]-1] == 0) && (complete[queue[0]-1] == false)){

                //turn array currently stores the completion time

                turn[queue[0]-1] = timer;        

                complete[queue[0]-1] = true;

            }

             

              //checks whether or not CPU is idle

            bool idle = true;

            if(queue[n-1] == 0){

                for(int i = 0; i < n && queue[i] != 0; i++){

                    if(complete[queue[i]-1] == false){

                        idle = false;

                    }

                }

            }

            else

                idle = false;
 

            if(idle){

                timer++;

                checkNewArrival(timer, arrival, n, maxProccessIndex, queue);

            }

       

            //Maintaining the entries of processes 

            //after each premption in the ready Queue

            queueMaintainence(queue,n);

        }

    }
 

    for(int i = 0; i < n; i++){

        turn[i] = turn[i] - arrival[i];

        wait[i] = turn[i] - burst[i];

    }
 

    cout << "\nProgram No.\tArrival Time\tBurst Time\tWait Time\tTurnAround Time"

         << endl;

    for(int i = 0; i < n; i++){

        cout<<i+1<<"\t\t"<<arrival[i]<<"\t\t"

          <<burst[i]<<"\t\t"<<wait[i]<<"\t\t"<<turn[i]<<endl;

    }

    for(int i =0; i< n; i++){

        avgWait += wait[i];

        avgTT += turn[i]; 

    }

    cout<<"\nAverage wait time : "<<(avgWait/n)

      <<"\nAverage Turn Around Time : "<<(avgTT/n);
 

    return 0;
}

// producer consumer problem

// C program for the above approach

#include <stdio.h>
#include <stdlib.h>

int mutex = 1;
int full = 0;


int empty = 10, x = 0;

void producer()
{
	
	--mutex;
	++full;
	--empty;
	x++;
	printf("\nProducer produces" "item %d",	x);

	++mutex;
}
void consumer()
{
	
	--mutex;
	--full;
	++empty;
	printf("\nConsumer consumes ""item %d",
		x);
	x--;
	++mutex;
}

// Driver Code
int main()
{
	int n, i;
	printf("\n1. Press 1 for Producer"
		"\n2. Press 2 for Consumer"
	for (i = 1; i > 0; i++) {

		printf("\nEnter your choice:");
		scanf("%d", &n);

		// Switch Cases
		switch (n) {
		case 1:

			if ((mutex == 1)
				&& (empty != 0)) {
				producer();
			}
			
			else {
				printf("Buffer is full!");
			}
			break;

		case 2:

			if ((mutex == 1)
				&& (full != 0)) {
				consumer();
			}

			else {
				printf("Buffer is empty!");
			}
			break;

		case 3:
			exit(0);
			break;
		}
	}
}


